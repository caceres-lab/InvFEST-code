.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ExtUtils::Mkbootstrap 3"
.TH ExtUtils::Mkbootstrap 3 "2018-03-19" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Mkbootstrap \- make a bootstrap file for use by DynaLoader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`Mkbootstrap\*(C'\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mkbootstrap typically gets called from an extension Makefile.
.PP
There is no \f(CW\*(C`*.bs\*(C'\fR file supplied with the extension. Instead, there may
be a \f(CW*_BS\fR file which has code for the special cases, like posix for
berkeley db on the NeXT.
.PP
This file will get parsed, and produce a maybe empty
\&\f(CW@DynaLoader::dl_resolve_using\fR array for the current architecture.
That will be extended by \f(CW$BSLOADLIBS\fR, which was computed by
\&\fIExtUtils::Liblist::ext()\fR. If this array still is empty, we do nothing,
else we write a .bs file with an \f(CW@DynaLoader::dl_resolve_using\fR
array.
.PP
The \f(CW*_BS\fR file can put some code into the generated \f(CW\*(C`*.bs\*(C'\fR file by
placing it in \f(CW$bscode\fR. This is a handy 'escape' mechanism that may
prove useful in complex situations.
.PP
If \f(CW@DynaLoader::dl_resolve_using\fR contains \f(CW\*(C`\-L*\*(C'\fR or \f(CW\*(C`\-l*\*(C'\fR entries then
Mkbootstrap will automatically add a \fIdl_findfile()\fR call to the
generated \f(CW\*(C`*.bs\*(C'\fR file.
