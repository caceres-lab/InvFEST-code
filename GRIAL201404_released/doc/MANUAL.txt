#------------------------------------------------------------------------------------
# Copyright (C) 2014, by the authors,  All rights reserved.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#	
# Name:      	MANUAL.txt 
#
# Author(s): 	Alexander Martínez-Fundichely & Sònia Casillas
#		Comparative and Functional Genomics group
#		Institut de Biotecnologia i de Biomedicina
#		Universitat Autònoma de Barcelona, Spain
#
# Contact:	batscherow@gmail.com, sonia.casillas@uab.cat
#
#     Status.......: 3.1 (Released)
#     Status Date..: 01.04.2014
#     Purpose......: manual of the GRIAL software
#
# Changes   Date(DD.MM.YYYY)   NAME   DESCRIPTION
#
#------------------------------------------------------------------------------------

Geometric Rules Inversion ALgorithm (GRIAL)

Manual

SUMMARY ==============================================

GRIAL is a software for predicting inversions and refining their 
breakpoints based on the computation of some geometric rules specific 
to inversions in a PEM assay. GRIAL can also score all the predicted 
inversions based on the number of concordant PEMs in the region of the 
inversion, and the expected number of discordant PEMs supporting each 
breakpoint given the inversion size, the repetitive nature of the sequence 
of the breakpoints, and the sequencing coverage.

If you use GRIAL in your research, please cite: Martínez-Fundichely 
et al. (in preparation)


REQUIREMENTS =========================================

Runs on: Unix OS & Microsoft Windows (except the fetchChromSizes script from UCSC)

Requires: Perl & the following Perl libraries:
 - DBI
 - DBD::mysql
 - Cwd
 - List::Util
 - Math::CDF
 - Number::Interval
 - Statistics::Descriptive


USAGE =========================================

 - Usage: perl ./GRIAL.pl <Configuration File>

 - Options: All options are set in the self-explanatory Configuration File (<GRIAL.config>)

 - Input data: See INPUT DATA below

 - Output data: See OUTPUT DATA below	


INPUT DATA ==================================

All the necessary information regarding input data to GRIAL must be specified in the sections 
"SECTION 1: PATHS & FILENAMES" and "SECTION 2: LIBRARY STATISTICS & ASSEMBLY" of the
Configuration File.

(i) Input data for GRIAL are paired-end mapping data that is discordant for inversions (not the 
complete result of a PEM assay).   

(ii) General statistics of the PEM assay are necessary for GRIAL to predict inversions. They can 
be specified in the Configuration File under section "SECTION 2: LIBRARY STATISTICS & ASSEMBLY" 
(see the file <GRIAL.config> included in this distribution), or can be rather computed by GRIAL if 
adequate files with concordant mappings are supplied for each chromosome (see configuration option
CONCORDANTS_FILENAME_PREFIX under section "SECTION 1: PATHS & FILENAMES" of the Configuration File).

(iii) File formats:

NOTE: In each of the following file formats below, lines beginning with "#" are considered comments and ignored. 

NOTE: Since mapped start and end are in terms of the reference sequence, Start < End.

NOTE: Each line gives the mapping information for a PEM. Columns are tab-separated in the following formats:

   (*) Format for discordant mappings:

colLibrary:			A string with an individual's library unique code.
colName: 			A string with a unique PEM code.
colChr:				A string identifing the chromosome where the read was mapped. (Format is according to UCSC)
colStartLeft:		A integer identifing the coordinate of the start of the left read.
colEndLeft:			A integer identifing the coordinate of the end of the left read.
colStartRight:		A integer identifing the coordinate of the start of the right read.
colEndRight:		A integer identifing the coordinate of the end of the right read.			
colStrand:			A char identifing the strand where the reads mapped. (For inversion signal both reads mapp 
					in the same strand. Acceptable formats: + or - ) 
colSeqOrient:		The sequencig orientation of the left read.(On paired-end sequencig, orientation of both 
					reads are complementary Forward<->Reverse. Acceptable formats: R or F ) 

For example:
#colLibrary	colName	colChr	colStartLeft	colEndLeft	colStartRight	colEndRight	colStrand	colSeqOrient
ABC10	ABC10_722068_A17	chr16	1197946	1198800	1230933	1231727	+	R
ABC10	ABC10_722268_G24	chr21_random	823924	824684	1438534	1439260	+	R
ABC10	ABC10_722368_M2	chrX	48586345	48587180	48600806	48601372	+	F
ABC10	ABC10_638658_C11	chr17	2946503	2947231	3098930	3099699	-	R 

   (**) Format for concordant mappings (used by GRIAL to compute the library statistics and/or score final inversion predictions):

colChr:				A string identifing the chromosome where the reads mapped. (Format is according to UCSC)
colStart:			An integer identifing the coordinate of the start of the left read.
colEnd:				An integer identifing the coordinate of the end of the right read.
colTemplate:		A string with the template fragment unique code.
colScore:			An integer score.
colStrand:			A char identifing the strand where the REVERSE read mapped. (Acceptable formats: + or - ) 
colReadCount:		An integer count of number of reads mapped. (Always 2 for concordants) 
colStartLeft:		An integer identifing the coordinate of the start of the left read.
colStartRight:		An integer identifing the coordinate of the start of the right read.
colLeftReadLenght:	An integer identifing the lenght of the mapping of the left read.
colRightReadLenght:	An integer identifing the lenght of the mapping of the right read.
colLeftReadName:	A string with the unique code of the left read.
colLeftReadName:	A string with the unique code of the right read.
colLibrary:			A string with the individual library unique code.

For example:
chr1	17311	58504	ABC10_44536500_F14	3026	-	2	17311	57755	791	749	173650_ABC10_2_1_000044536500_F14.REVERSE.1	173650_ABC10_2_1_000044536500_F14.FORWARD.1	ABC10
chr1	17311	58532	ABC10_44633400_E8	3223	-	2	17311	57737	835	795	174552_ABC10_2_1_000044633400_E8.REVERSE.1	174552_ABC10_2_1_000044633400_E8.FORWARD.1	ABC10
chr1	17330	58503	ABC10_44511300_C9	2877	-	2	17330	57804	754	699	173650_ABC10_2_1_000044511300_C9.REVERSE.1	173650_ABC10_2_1_000044511300_C9.FORWARD.1	ABC10
chr1	33689	71810	ABC10_45498500_G15	2113	+	2	33689	71523	788	287	171417_ABC10_2_1_000045498500_G15.FORWARD.1	171417_ABC10_2_1_000045498500_G15.REVERSE.1	ABC10


FILTERING OF PEMS ============================

All the options regarding the initial filtering of PEMs are specified in the section "SECTION 3: 
FILTERING OF MAPPINGS" of the Configuration File. Several filtering options are available, which are
explained in the self-explanatory GRIAL.config. 

Briefly, input PEMs can be filtered based on the library, the chromosome, and the number of possible 
mappings to the reference genome. 

PEMs can also be discarded when the mappings of both ends overlap. In this case a maximum percentage 
of overlap might be specified. 

Artificially duplicated PEMs can also be identified and weighted when several PEMs coming from the 
same library and having the same orientation have virtually the same location (see Tuzun et al. 2005).
In this case a minimum distance between the mapped ends of the reads might be specified for some or 
all the libraries, taking into account the sequencing strategy.

PEMs can also be either discarded or just tagged when the reads map to repeats or segmental 
duplications. Different kinds of repeats according to RepeatMasker might be specified.


CLUSTERING ===================================

The options regarding the clustering of the PEMs are specified in the section "SECTION 4: CLUSTERING 
& INVERSION PREDICTION" of the Configuration File. Basically, you can specify which is the minimum
number of PEMs required to form a cluster.

The clustering stage harbors the first set of geometrical rules developed and implemented in GRIAL:

(Set 1 of rules) Identification and clustering of discordant PEMs that are consistent with the same 
inversion breakpoint:

	Rule 1.1.- For 2 PEM to belong to the same inversion BP, all should have the same orientation, and 
				the distance between the two ends have to be within the variation of the library size.
				
	Rule 1.2.- Sum rule: The sum of the position of the two ends have to be constant and it cannot 
				vary more than the library size. 
				
Schemmatically, the following equations must satisfy for two PEMs to be included in the same cluster:

	For ++ clusters:
				
		abs(jLS-iLS) < MAX
		jLS < iRS
		jRS > iLS
		abs(iRS-jRS) < MAX
		abs((jLS+jRS)-(iLS+iRS)) < RANGE
		
	For -- clusters:
				
		abs(iRE-jRE) < MAX
		jRE > iLE
		jLE < iRE
		abs(jLE-iLE) < MAX
		abs((jLS+jRS)-(iLS+iRS)) < RANGE
		
where i and j are two different PEMs, LS is the mapping start coordinate of the left read, LE is the
mapping end coordinate of the left read, RS is the mapping start coordinate of the right read, RE is 
the mapping end coordinate of the right read, MAX is the maximum fragment size of the library, and 
RANGE is the range of fragment sizes of the library (maximum fragment size - minimum fragment size).


PREDICTION OF INVERSIONS =====================

The options regarding the prediction of inversions are specified in the section "SECTION 4: CLUSTERING 
& INVERSION PREDICTION" of the Configuration File. Basically, you can specify which is the minimum
number of PEMs required to form an inversion, or if inversions predicted by either a ++ cluster or a -- 
cluster only might be allowed. You can also specify to use or not the most strict rules to join ++ and 
-- clusters into inversions (see below), to repair inconsistences due to inexistent chromosomes or
location of breakpoint coordinates out of the range of the chromosomes (if a reference ASSEMBLY is
specified), to tag suspicious inversions due to incongruent narrow breakpoints (tagged in the output with
the symbol !), or to tag the use of the same cluster in >1 predicted inversions (tagged in the output
with the symbol #).

The prediction of inversions stage harbors the second set of geometrical rules developed and implemented 
in GRIAL:

(Set 2 of rules) Merging of PEM of the two breakpoints of the same inversion:

	Rule 2.1.- The maximum distance between the limits of the clusters cannot be more than twice the 
				library length plus the expected variation (and the beginning of PEM + cannot cross 
				with the end of PEM ).

	Rule 2.2.- The difference between the sum of the positions of the two ends of PEM + and PEM  clusters 
				should be within twice the library length plus the expected variation.

Schemmatically, the following equations must satisfy for two clusters to be merged into the same inversion:

	Basic rules:
	
		posSUM < negSUM
		abs(posSUM - negSUM) > 2*MIN
		abs(posSUM - negSUM) < 2*MAX
		abs(posLS - negLE) <= 2*MAX
		abs(posRS - negRE) <= 2*MAX
		posRE <= negRS
		negLS >= posLE
		
	Strict rule:
	
		Definitions:
		posT = posSUM + (AVG + (MAX-AVG)/sqrt(posDIS))
		posB = posSUM + (AVG - (AVG-MIN)/sqrt(posDIS))
		negT = negSUM - (AVG - (AVG-MIN)/sqrt(negDIS))
		negB = negSUM - (AVG + (MAX-AVG)/sqrt(negDIS))
		
		Rule:
		(((posT > negB) AND (posT < negT))    OR    ((posB > negB) AND (posB < negT))
			OR    ((negT > posB) AND (negT < posT))    OR    ((negB > posB) AND (negB < posT)))

where posSUM and negSUM are the average of iLS+iRS of all the paired-ends supporting the positive and 
the negative clusters respectively (see previous section), posLS and negLS are the smallest mapping 
coordinate of all left reads in the positive and negative clusters respectively, posLE and negLE are 
the highest mapping coordinate of all left reads in the positive and negative clusters respectively, 
posRS and negRS are the smallest mapping coordinate of all right reads in the positive and negative 
clusters respectively, posRE and negRE are the highest mapping coordinate of all right reads in the 
positive and negative clusters respectively, posDIS and negDIS are the discordant support of the 
positive and the negative clusters respectively, AVG is the average fragment size of the library, MIN 
is the minimum fragment size of the library, and MAX is the maximum fragment size of the library.


DEFINITION OF THE BREAKPOINTS ================

In the section "SECTION 5: OUTPUT" of the Configuration File you can specify the refinement of the 
inversion breakpoints in the option BP_DEFINITION. If this option is set to 'wide', rule 3.1 below 
will be applied. Alternatively, if this option is set to 'narrow', rule 3.2 below will be applied
instead. This option can also be set to 'all' and you will obtain a set of files with the wide 
breakpoints and another set of files with the narrow breakpoints. 

(Set 3 of rules) Refinement of the intervals where the breakpoints are most likely located:

	Rule 3.1.- Breakpoints are defined by the position of the most internal mapping outside the 
				inversion and the closest within (either + or ).

	Rule 3.2.- Alternatively, the breakpoint limits can be defined by adding to the closest PEM, 
				the difference between the maximum library length minus the distance between the 
				closest and the furthest PEM. 

Schemmatically, breakpoints are refined as follows:

	Inversions supported by both a positive and a negative cluster:
	
		Wide breakpoints:
		
			wBP1S = max(posLE, negLE-MAX)
			wBP1E = min(posRS, negLS, posLS+MAX)
			wBP2S = max(posRE, negLE, negRE-MAX)
			wBP2E = min(negRS, posRS+MAX)
		
		Narrow breakpoints:
		
			nBP1S = max(wBP1S, Test all i PEMs [iLEneg-(MAX-(iREneg-wBP2E))])
			nBP1E = min(wBP1E, Test all i PEMs [iLEneg-(MIN-(iREneg-iLEneg))])
			nBP2S = max(wBP2S, Test all i PEMs [iRSpos+(MIN-(iRSpos-iLSpos))])
			nBP2E = min(wBP2E, Test all i PEMs [iRSpos+(MAX-(wBP1S-iLSpos))])
	
	Inversions supported by a positive cluster only:
	
		Wide breakpoints:

			wBP1S = posLE
			wBP1E = min(posRS, posLS+MAX)
			wBP2S = posRE
			wBP2E = posRS+MAX
		
		Narrow breakpoints:
	
			nBP1S = wBP1S
			nBP1E = wBP1E
			nBP2S = max(wBP2S, Test all i PEMs [iRSpos+(MIN-(iRSpos-iLSpos))])
			nBP2E = min(wBP2E, Test all i PEMs [iRSpos+(MAX-(wBP1S-iLSpos))])

	Inversions supported by a negative cluster only:

		Wide breakpoints:

			wBP1S = negLE-MAX
			wBP1E = negLS
			wBP2S = max(negLE, negRE-MAX)
			wBP2E = negRS
		
		Narrow breakpoints:

			nBP1S = max(wBP1S, Test all i PEMs [iLEneg-(MAX-(iREneg-wBP2E))])
			nBP1E = min(wBP1E, Test all i PEMs [iLEneg-(MIN-(iREneg-iLEneg))])
			nBP2S = wBP2S
			nBP2E = wBP2E
			
where wBP1S and wBP1E are the start and end positions of the first breakpoint according to rule 3.1
(wide breakpoints), wBP2S and wBP2E are the start and end positions of the second breakpoint
according to rule 3.1 (wide breakpoints), nBP1S and nBP1E are the start and end positions of the 
first breakpoint according to rule 3.2 (narrow breakpoints), nBP2S and nBP2E are the start and end 
positions of the second breakpoint according to rule 3.2 (narrow breakpoints), posLS and negLS are 
the smallest mapping coordinate of all left reads in the positive and negative clusters respectively, 
posLE and negLE are the highest mapping coordinate of all left reads in the positive and negative 
clusters respectively, posRS and negRS are the smallest mapping coordinate of all right reads in the 
positive and negative clusters respectively, posRE and negRE are the highest mapping coordinate of 
all right reads in the positive and negative clusters respectively, iLSpos is the mapping start 
coordinate of the left read from a positive PEM, iLEpos is the mapping end coordinate of the left 
read from a positive PEM, iRSpos is the mapping start coordinate of the right read from a positive 
PEM, iREpos is the mapping end coordinate of the right read from a positive PEM, iLSneg is the 
mapping start coordinate of the left read from a negative PEM, iLEneg is the mapping end coordinate 
of the left read from a negative PEM, iRSneg is the mapping start coordinate of the right read from 
a negative PEM, iREneg is the mapping end coordinate of the right read from a negative PEM, MAX is 
the maximum fragment size of the library, and MIN is the minimum fragment size of the library.	


SCORING ======================================

There is a whole section ("SECTION 6: SCORING") in the Configuration File where you can specify 
several parameters about the scoring. If SCORE_INVERSIONS is set to yes, GRIAL will compute two
different metrics to score predicted inversions:

(Score 1) Discordant-concordant (DC) ratio score. 

	Assuming a diploid genome, the ratio of the number of discordant fragments supporting a predicted 
	breakpoint interval with respect to the total number of mappings (both concordant and discordant) 
	across the same interval is expected to be 1 for homozygote inversions and 0.5 for heterozygote 
	inversions (half the reads mapped at each side of the breakpoint interval should be concordant 
	and the other half should be discordant). Deviations from these expected values can be 
	considered a signal of erroneous inversion predictions. To calculate this score, the observed DC 
	ratio is calculated for all individuals assuming that individuals with discordant PEMs
	only are homozygous for the inversion, while those having both discordant and concordant PEMs in
	the region are heterozygous for the inversion (which is a conservative estimate). Observed and 
	expected numbers of PEMs are calculated for each individual separately, and then the DC_ratio is
	calculated across individuals as follows: 
	
		Definitions:
		
			$T = total number of PEMs in the region, including discordant and concordant
			$O = observed number of discordant PEMs supporting the inversion
			$E = expected number of discordant PEMs supporting the inversion, considering that the 
					individual is homozygote if there are no concordant PEMs in the region (then 
					$E = $O), or that the individual is heterozygote if there are concordant PEMs 
					in the region (then $E = $T/2).
					
		Then, after calculating these numbers for each individual and summing up values across 
		individuals:
		
		DC_ratio = $E/$O
	
	Furthermore, an expected vs observed ratio test is also performed:
	
		DC_ratio_test = (($O/$T)-($E/$T))/sqrt((($O/$T)*(1-($O/$T))/$T)+(($E/$T)*(1-($E/$T))/$T)) 
			or 1 if there are no concordant PEMs in the region of the inversion
	
	We normally consider as unreliable those predictions for which the expected DC ratio is more than 
	double the observed one, and the expected vs observed ratio test P-value is less than 0.05.
	
	This score has the advantage that uses concordant mappings in the same region to estimate the 
	expected number of discordant mappings depending on the predicted inversion genotype, and therefore 
	it is not sensitive to specific characteristics of the region that might affect the number of mapped 
	reads. In addition, for valid inversions, the DC ratio for each individual can be also used to predict 
	the inversion genotype. Then, in the output results you will find, for each individual, which is the
	likelihood of this individual being heterozygote for the inversion, which is calculated as follows:
	
		Definitions:
		
			alpha = $O/$T or 0.5 if there are no concordant PEMs in the region of the inversion
			discPEMs = observed number of discordant PEMs supporting the inversion = $O
			concPEMs = observed number of concordant PEMs in the region of the inversion = $T-$O
			
		Likelihood_heterozygote = (alfa^discPEMs)*((1-alfa)^concPEMs)
		
(Score 2) Discordant support (DS) probability score.  

	The second score calculates the expected support for the inversion considering a homogeneous read-depth 
	for each chromosome, taking into account the predicted inversion size, the size of both breakpoint 
	intervals, the length of the fragments of the sequencing library, and the mapability in the region 
	according to the presence of segmental duplications and other repetitive elements. Given a haplotype 
	carrying an inversion, only a region of the length of the library or of the size of the inversion, 
	whichever is smaller, will contain PEMs discordant for one breakpoint, and the same applies to the 
	other breakpoint. Then, if we assume that the read-depth is homogeneous along the chromosome, we can 
	calculate which is the expected number of discordant PEMs laying in the region and thus supporting the 
	inversion breakpoint in the case that the individual is heterozygote (if the individual is homozygote 
	it will be twice this number, and thus our choice is conservative). Finally, for each inversion 
	breakpoint separately, we calculate which is the probability that this breakpoint, for which we expect 
	lambda discordant PEMs supporting it, it is supported by k <= kobs discordant PEMs, according to the 
	Poisson distribution:
	
		P(k<=k_obs;lambda)=Sum for all k values from 0 to k_obs [(e^(-lambda) x lambda^k)/k!]
	
	
	MAPABILITY CORRECTION:
	
	However, some of the sites in these regions might not be effectively mappable (or less mappable) if 
	they contain repetitive sequences, so the presence of repeats and segmental duplications is considered 
	here to reduce the size of the region (mapability correction). If DISCARD_MAPPINGS_IN_REPEATS=yes
	in the Configuration File, then those sites included in DISCARD_REPEATS_LIST are effectively not 
	mappable (PEMs mapping there were excluded before inversion prediction) and are also excluded when 
	computing the mapability correction. The same is true when DISCARD_MAPPINGS_IN_SEGDUPS=yes. 
	
	Furthermore, even if those parameters above were set to no, GRIAL can take into account the presence 
	of repeats by RepeatMaker (MAPABILITY_REPEATS=yes) or segmental duplications (MAPABILITY_SEGDUPS=yes) 
	(or both) to reduce the mapability in the region of the breakpoints for the computation of the DS 
	score. 
	
	If MAPABILITY_REPEATS=yes, you can choose a value for the percentage of identity of repetitive 
	sites (MAPABILITY_REPEATS_IDENTITY). Then, the mapability on these sites is calculated using the 
	binomial distribution as follows:
	
		Definitions:
		
			n = length of the sequencing reads in base pairs (MAPABILITY_FRAGMENT_SIZE)
			x = number of sequencing errors expected in the sequencing reads (MAPABILITY_NUM_CHANGES)
			id = % of identity of repetitive sites (MAPABILITY_REPEATS_IDENTITY)
			
		mapability_repeats = 1 - pbinom(x, n, 1-id)
	
	In the case of segmental duplications, the calculation of the mapability is a bit more tricky. 
	Mismatches among different copies of a segmental duplication are normally not randomly distributed 
	across the segmental duplication, so that the central core of the segmental duplication tends to be
	really identical, while most mismatches occur at the ends. Then, if MAPABILITY_SEGDUPS=yes, you can
	set a couple of parameters to determine the structure of the segmental duplications in your genome:
	
		Definitions:
		
			MAPABILITY_SEGDUPS_CORE = % of the segmental duplication that is the central core, from 0 to 1
			MAPABILITY_SEGDUPS_CHANGES_CORE = % of the changes that occur in the central core, from 0 to 1
	
	Then, taking into account the identity of each specific segmental duplication from the UCSC database,
	the region is subdivided into different sites with different identities, depending on the position
	within the segmental duplication (core or extremes), and for each region, the corresponding mapability
	is calculated as follows:
	
		mapability_segdups_i = 1 - pbinom(x, n, 1-id_i)
		
	Then, the general mapability of segmental duplications is ponderated by taking into acount the 
	length of each region with a different identity:
	
		                     Sum for all i values as number of regions [mapability_segdups_i x length_segdups_i]
		mapability_segdups = -----------------------------------------------------------------------------------
								       Sum for all i values as number of regions [length_segdups_i]

	Finally, a general mapability is calculated for each breakpoint, as:
	
		                   length_norep + (mapability_repeats x length_repeats) + (mapability_segdups x length_segdups)
		mapability_total = --------------------------------------------------------------------------------------------
														      total_BP_length

	where length_norep is the number of sites which are not repeats nor segmental duplications (note that the
	mapability of these sites is 1), and total_BP_length is the total length of the breakpoint region also 
	including those sites that have been totally discarded by the options DISCARD_MAPPINGS_IN_REPEATS or
	DISCARD_MAPPINGS_IN_SEGDUPS (the mapability of these sites is 0).
	
	When DISCARD_MAPPINGS_IN_REPEATS=yes or DISCARD_MAPPINGS_IN_SEGDUPS=yes or MAPABILITY_REPEATS=yes or 
	MAPABILITY_SEGDUPS=yes, a value for mapability_total is obtained as described above. This value ranges 
	from 0 to 1, where 0 means that the breakpoint region is no mapable (we don't expect any discordant PEM 
	supporting the breakpoint) and 1 means completely mapable (we expect a number of discordant PEMs supporting
	the breakpoint that depends exclusively on the size of the fragments of the library and the size of the
	inversion). Then, this mapability_total is used to calibrate lambda as follows:
	
		lambda_mapability = lambda x mapability_total
		
	and this lambda corrected by the mapability is the one used to calculate which is the probability that 
	this breakpoint, for which we expect lambda_mapability discordant PEMs supporting it, it is supported by 
	k <= kobs discordant PEMs, according to the Poisson distribution:
	
		P(k<=k_obs;lambda_mapability)=Sum for all k values from 0 to k_obs [(e^(-lambda_mapability) x lambda_mapability^k)/k!]
	
	We normally consider as unreliable all the predictions for which the Poisson distribution P-value of the 
	observed discordant support is less than 0.001.
	
	
OUTPUT DATA ==================================

From less processed to more processed results:

(i) One file per chromosome and strand with the processed input PEMs (optional; see OUTPUT_PEM_INDEXES)

   (*) <chr><strand>.PEMids - Format:

Each line corresponds to one input PEM. Columns are tab-separated in the following format:

colChr_strand:		A string with the chromosome and strand of the PEM.
colPEMID:			An integer with the unique identifier of the PEM (assigned by GRIAL).
colLibraryID:		A string with the library of the PEM.
colPEMoriginalID:	A string with the original PEM identifier.
colPEMnumMaps:		An integer with the number of possible mappings of this PEM against the reference genome.
colClusterID:		An integer with the cluster ID to which the PEM was assigned.
colDuplicatePEMs:	A string with other PEM IDs which are duplicates of the current PEM.
colTags:			If requested in the Configuration File (see options TAG_MAPPINGS_IN_REPEATS and TAG_MAPPINGS_IN_SEGDUPS 
					in the section "SECTION 3: FILTERING OF MAPPINGS"), this column will include a set of symbols telling 
					if the PEM maps to repeats or segdups in the reference genome ( ^ = repeats, and : = segdups).

For example:
chr1-	128	ABC8	ABC8_42542700_M4	1	494	129..	
chr1-	129	ABC8	ABC8_5692549_G9	1	494	128..	
chr1-	305	ABC9	ABC9_45485400_J12	1	495	306..307..	

(2) One file per chromosome and strand with the PEM clusters

   (*) <chr><strand>.clusters - Format:

Each line corresponds to one cluster. Columns are tab-separated in the following format:

colChr_strand:		A string with the chromosome and strand of the cluster. If TAG_MULTIPLE_USE_OF_CLUSTERS=yes in the
					Configuration File, lines starting with the # symbol mean that the cluster have been used  in
					multiple inversion predictions
colClusterID:		An integer with the unique identifier of the cluster (assigned by GRIAL).	
colPEM_list:		A string with the list of PEMs included in the cluster (comma-separated) 		
colSupport:			An integer with the total number of PEMs supporting the cluster (unfiltered PEMs). 
colFiltSupport:		An integer with the total number of PEMs supporting the cluster (filtered PEMs). 
colSumCoef:			A float with the sum coefficient of the cluster.
colVarSumCoef:		A float with the variance of the sum coefficient of the cluster.
colLeftStartMin:	Minium coordinate of left reads: <min_leftRead_start>;<min_leftRead_end>
colLeftEndMax:		Maximum coordinate of left reads: <max_leftRead_start>;<max_leftRead_end>
colRightStartMin:	Minium coordinate of right reads: <min_rightRead_start>;<min_rightRead_end>
colRightEndMax:		Maximum coordinate of right reads: <max_rightRead_start>;<max_rightRead_end>
colOneMapPEMs:		An integer with the number of PEMs having only one possible mapping to the reference genome, that are supporting the cluster.
colTags:			If requested in the Configuration File (see options TAG_MAPPINGS_IN_REPEATS and TAG_MAPPINGS_IN_SEGDUPS 
					in the section "SECTION 3: FILTERING OF MAPPINGS", and options TAG_INCONGRUENT_BPS and 
					TAG_MULTIPLE_USE_OF_CLUSTERS in the section "SECTION 4: CLUSTERING & INVERSION PREDICTION"), 
					this column will include a set of symbols telling if the PEM maps to repeats or segdups in the 
					reference genome ( ^ = repeats, : = segdups, and # = use of the same cluster for multiple inversion predictions).

For example:
chr1+	66	1013,1014	2	2	303080699	56052864	151531600;151531900	151542422;151542722	151543571;151543871	151543805;151544105	2	
chr1+	67	597,598	2	2	133649586.5	103723204	66802011;66802311	66828276;66828576	66828512;66828812	66840374;66840674	2	
chr1+	68	953	1	1	290493505	0	144012566;144012866	144012566;144012866	146480939;146481239	146480939;146481239	1	
      
(3) One file per chromosome with the predicted inversions with wider breakpoint locations

   (*) <chr>.inversions.wide - Format:

Each line corresponds to one predicted inversion. Columns are tab-separated in the following format:

colCluster+ID:		An integer with the unique identifier for the positive cluster (PEMs mapping in the positive strand).
colCluster-ID:		An integer with the unique identifier for the negative cluster (PEMs mapping in the negative strand).
colChr:				A string with the chromosome where the inversion was predicted. (Format is according to UCSC)
colSupport:			An integer with the total number of PEMs supporting the inversion. 
colBP1Start:		An integer identifing the left-most coordinate of breakpoint 1.
colBP1End:			An integer identifing the right-most coordinate of breakpoint 1.
colBP2Start:		An integer identifing the left-most coordinate of breakpoint 2.
colBP2End:			An integer identifing the right-most coordinate of breakpoint 2.
colBPsupport:		<BP1_filtered_support>(<BP1_unfiltered_support>)/<BP2_filtered_support>(<BP1_unfiltered_support>). 
colTags:			If requested in the Configuration File (see options TAG_MAPPINGS_IN_REPEATS and TAG_MAPPINGS_IN_SEGDUPS 
					in the section "SECTION 3: FILTERING OF MAPPINGS", and options TAG_INCONGRUENT_BPS and 
					TAG_MULTIPLE_USE_OF_CLUSTERS in the section "SECTION 4: CLUSTERING & INVERSION PREDICTION"), 
					this column will include a set of symbols telling if the PEM maps to repeats or segdups in the 
					reference genome ( ^ = repeats, : = segdups, # = use of the same cluster for multiple inversion predictions,
					and ! = incongruent narrow BPs had to be corrected because startBP2 < endBP1).

For example:
26	34	chr1	4	245357627	245358524	245398436	245400877	2(2)/2(2)	
29	NA	chr1	2	246729104	246735033	246754267	246776397	2(2)/0(0)	
3	NA	chr1	18	246715485	246719487	246796677	246790926	18(18)/0(0)	!
   
(4) One file per chromosome with the predicted inversions with narrower breakpoint locations

   (*) <chr>.inversions.narrow - Format:

Format is equivalent to the previous file type -see (3) above-.
   
(5) One file with a summary of PEMs, clusters and predicted inversions in each chromosome

   (*) summaryresults.out - Format:
   
Each line corresponds to one analyzed chromosome (excluding scoring). Columns are tab-separated in the following format:

colChr:				A string with the chromosome. (Format is according to UCSC)
colPEMs:			Number of PEMs in the positive strand / Number of PEMs in the negative strand
colClusters:		Number of clusters in the positive strand / Number of clusters in the negative strand
colCorrClusters:	Number of clusters that needed correction (tagged as !) in the positive strand / Number of clusters that needed correction (tagged as !) in the negative strand
colInversions:		Number of inversions predicted by both positive and negative clusters / Number of inversions predicted by a positive cluster only / Number of inversions predicted by a negative cluster only
colInconsistences:	Number of inversions with discrepancies in the breakpoints location: A1,A2,A3/B1,B2,B3/C1,C2,C3/D1,D2,D3/E1,E2,E3/F1,F2,F3, where:
						A = Chromosome name does not exist in the UCSC for this species
						B = Breakpoint 1 is outside of the range of the chromosome
						C = Breakpoint 2 is outside of the range of the chromosome
						D = BP1start > BP1end
						E = BP2start > BP2end
						F = BP1end > BP2start
						1 = Definition 1 of the breakpoints (see section "DEFINITION OF THE BREAKPOINTS" above)
						2 = Definition 2 of the breakpoints (see section "DEFINITION OF THE BREAKPOINTS" above)
						3 = Definition 3 of the breakpoints (see section "DEFINITION OF THE BREAKPOINTS" above)
colTimestamp:		Finished analyses on this chromosome on this timestamp (excluding scoring)		

For example:
chr14	79/68	38/37	0/0	9/5/5	0,0,0/0,0,0/0,0,0/0,0,0/0,0,1/0,2,0	Thu Jan 16 10:57:37 2014
chr18	34/18	21/14	0/0	1/3/1	0,0,0/0,0,0/0,0,0/0,0,0/0,0,0/0,2,1	Thu Jan 16 10:57:37 2014
chr20	46/54	23/31	0/0	2/3/1	0,0,0/0,0,0/0,0,0/0,0,0/0,0,0/0,2,0	Thu Jan 16 10:57:37 2014

(6) One file per chromosome with the scored inversions

   (*) <chr>.inversions.<narrow|wide>.genotyped - Format:

Each section, delimited by a line of dash symbols, corresponds to one predicted inversion. For each inversion, the first line contains basic statistics in tab-separated columns in the following format:

colCluster+ID:		An integer with the unique identifier for the positive cluster (PEMs mapping in the positive strand).
colCluster-ID:		An integer with the unique identifier for the negative cluster (PEMs mapping in the negative strand).
colChr:				A string with the chromosome where the inversion was predicted. (Format is according to UCSC)
colSupport:			An integer with the total number of PEMs supporting the inversion. 
colBP1Start:		An integer identifing the left-most coordinate of breakpoint 1.
colBP1End:			An integer identifing the right-most coordinate of breakpoint 1.
colBP2Start:		An integer identifing the left-most coordinate of breakpoint 2.
colBP2End:			An integer identifing the right-most coordinate of breakpoint 2.
colBPsupport:		<BP1_filtered_support>(<BP1_unfiltered_support>)/<BP2_filtered_support>(<BP1_unfiltered_support>). 
colConcordants:		An integer with the number of concordant PEMs bridging the breakpoints (BP1+BP2) (see section "SCORING" above)
colDCRatio:			A float with the DC ratio Expected/Observed for the Concordant + Discordant PEMs (see section "SCORING" above)
colDCTest:			A float with the DC test P-value for the Concordant + Discordant PEMs (see section "SCORING" above)
colDSLambda:		A float with the lambda for the DS score (expected number of discordant PEMs supporting one breakpoint of the inversion) (see section "SCORING" above)
colDSMapabilityBP1:	A float with the BP1 mapability for the DS score (% of the region of BP1 mapable by PEMs) (see section "SCORING" above)
colDSMapabilityBP2:	A float with the BP2 mapability for the DS score (% of the region of BP2 mapable by PEMs) (see section "SCORING" above)
colDSLambdaBP1:		A float with the BP1 lambda corrected by the BP1 mapability for the DS score (expected number of discordant PEMs supporting BP1 of the inversion) (see section "SCORING" above)
colDSLambdaBP2:		A float with the BP2 lambda corrected by the BP2 mapability for the DS score (expected number of discordant PEMs supporting BP2 of the inversion) (see section "SCORING" above)
colDSScoreBP1:		A float with the DS BP1 score (probability that the inversion is supported by the observed number of discordant PEMs or less in BP1) (see section "SCORING" above)
colDSScoreBP1:		A float with the DS BP2 score (probability that the inversion is supported by the observed number of discordant PEMs or less in BP2) (see section "SCORING" above)
colDSScoreTotal:	A float with the DS Total score (probability that the inversion is supported by the observed number of discordant PEMs or less) (see section "SCORING" above)

After this, a number of lines starting with > follow. For these lines, columns are tab-separated in the following format:

col>Symbol:			> symbol identifying this type of lines
colLibraryID:		A string with a library ID having discordant PEMs supporting this inversion
colLibraryConc:		An integer with the number of concordant PEMs for the current library bridging the breakpoints of the inversion
colLibraryDisc:		An integer with the number of discordant PEMs for the current library supporting the inversion
colLibraryLikely:	A float with the likelihood of this individual being heterozygote for the inversion (see section "SCORING" above)

For example:
10	37	chr1	8	25515013	25532113	25571051	25577607	6(6)/2(2)	33	2.5625	-3.05981055433589	8.82637665606407	0.891762696372936	0.897874871032482	7.87103344601483	7.92498180174763	0.329378477473795	0.0145823343072942	0.0245609882395128
>	ABC11	19	1	0.00238455736529416
>	ABC7	14	7	6.63884801721228e-07
----------------------------------------------------------------------------------------------------
